// Generated by Dagger (https://dagger.dev).
package tech.sutd.pickupgame.di;

import android.app.Application;
import android.graphics.drawable.Drawable;
import androidx.lifecycle.ViewModel;
import com.bumptech.glide.RequestManager;
import com.bumptech.glide.request.RequestOptions;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DatabaseReference;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import tech.sutd.pickupgame.BaseApplication;
import tech.sutd.pickupgame.SessionManager;
import tech.sutd.pickupgame.SessionManager_Factory;
import tech.sutd.pickupgame.di.auth.AuthFragmentBuildersModule_ContributeGetStartedFragment;
import tech.sutd.pickupgame.di.auth.AuthFragmentBuildersModule_ContributeLoginFragment;
import tech.sutd.pickupgame.di.auth.AuthFragmentBuildersModule_ContributeRegisterFragment;
import tech.sutd.pickupgame.di.main.MainFragmentBuildersModule_ContributeBookingFragment;
import tech.sutd.pickupgame.di.main.MainFragmentBuildersModule_ContributeMainFragment;
import tech.sutd.pickupgame.di.main.MainFragmentBuildersModule_ContributeUserFragment;
import tech.sutd.pickupgame.ui.auth.AuthActivity;
import tech.sutd.pickupgame.ui.auth.AuthActivity_MembersInjector;
import tech.sutd.pickupgame.ui.auth.UserViewModel;
import tech.sutd.pickupgame.ui.auth.UserViewModel_Factory;
import tech.sutd.pickupgame.ui.auth.gettingstarted.GetStartedFragment;
import tech.sutd.pickupgame.ui.auth.gettingstarted.GetStartedFragment_MembersInjector;
import tech.sutd.pickupgame.ui.auth.login.LoginFragment;
import tech.sutd.pickupgame.ui.auth.login.LoginFragment_MembersInjector;
import tech.sutd.pickupgame.ui.auth.register.RegisterFragment;
import tech.sutd.pickupgame.ui.auth.register.RegisterFragment_MembersInjector;
import tech.sutd.pickupgame.ui.main.BookingFragment;
import tech.sutd.pickupgame.ui.main.MainActivity;
import tech.sutd.pickupgame.ui.main.MainActivity_MembersInjector;
import tech.sutd.pickupgame.ui.main.main.MainFragment;
import tech.sutd.pickupgame.ui.main.main.MainFragment_MembersInjector;
import tech.sutd.pickupgame.ui.main.main.viewmodel.NewActViewModel;
import tech.sutd.pickupgame.ui.main.main.viewmodel.NewActViewModel_Factory;
import tech.sutd.pickupgame.ui.main.main.viewmodel.UpcomingActViewModel;
import tech.sutd.pickupgame.ui.main.main.viewmodel.UpcomingActViewModel_Factory;
import tech.sutd.pickupgame.ui.main.user.UserFragment;
import tech.sutd.pickupgame.viewmodels.ViewModelProviderFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory> authActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<FirebaseAuth> provideFirebaseAuthProvider;

  private Provider<SessionManager> sessionManagerProvider;

  private Provider<Application> applicationProvider;

  private Provider<Drawable> provideLoginDrawableProvider;

  private Provider<RequestOptions> provideRequestOptionsProvider;

  private Provider<RequestManager> provideGlideInstanceProvider;

  private Provider<DatabaseReference> provideUserReferenceProvider;

  private DaggerAppComponent(Application applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2).put(AuthActivity.class, (Provider) authActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.authActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory get() {
        return new AuthActivitySubcomponentFactory();
      }
    };
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.provideFirebaseAuthProvider = DoubleCheck.provider(AppModule_ProvideFirebaseAuthFactory.create());
    this.sessionManagerProvider = DoubleCheck.provider(SessionManager_Factory.create(provideFirebaseAuthProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideLoginDrawableProvider = DoubleCheck.provider(AppModule_ProvideLoginDrawableFactory.create(applicationProvider));
    this.provideRequestOptionsProvider = DoubleCheck.provider(AppModule_ProvideRequestOptionsFactory.create());
    this.provideGlideInstanceProvider = DoubleCheck.provider(AppModule_ProvideGlideInstanceFactory.create(applicationProvider, provideRequestOptionsProvider));
    this.provideUserReferenceProvider = DoubleCheck.provider(AppModule_ProvideUserReferenceFactory.create());
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);
  }

  @Override
  public SessionManager sessionManager() {
    return sessionManagerProvider.get();
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class AuthActivitySubcomponentFactory implements ActivityBuildersModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeAuthActivity.AuthActivitySubcomponent create(
        AuthActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AuthActivitySubcomponentImpl(arg0);
    }
  }

  private final class AuthActivitySubcomponentImpl implements ActivityBuildersModule_ContributeAuthActivity.AuthActivitySubcomponent {
    private Provider<AuthFragmentBuildersModule_ContributeGetStartedFragment.GetStartedFragmentSubcomponent.Factory> getStartedFragmentSubcomponentFactoryProvider;

    private Provider<AuthFragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory> loginFragmentSubcomponentFactoryProvider;

    private Provider<AuthFragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory> registerFragmentSubcomponentFactoryProvider;

    private AuthActivitySubcomponentImpl(AuthActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(AuthActivity.class, (Provider) DaggerAppComponent.this.authActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(GetStartedFragment.class, (Provider) getStartedFragmentSubcomponentFactoryProvider).put(LoginFragment.class, (Provider) loginFragmentSubcomponentFactoryProvider).put(RegisterFragment.class, (Provider) registerFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivity arg0) {
      this.getStartedFragmentSubcomponentFactoryProvider = new Provider<AuthFragmentBuildersModule_ContributeGetStartedFragment.GetStartedFragmentSubcomponent.Factory>() {
        @Override
        public AuthFragmentBuildersModule_ContributeGetStartedFragment.GetStartedFragmentSubcomponent.Factory get(
            ) {
          return new GetStartedFragmentSubcomponentFactory();
        }
      };
      this.loginFragmentSubcomponentFactoryProvider = new Provider<AuthFragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory>() {
        @Override
        public AuthFragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory get(
            ) {
          return new LoginFragmentSubcomponentFactory();
        }
      };
      this.registerFragmentSubcomponentFactoryProvider = new Provider<AuthFragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory>() {
        @Override
        public AuthFragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory get(
            ) {
          return new RegisterFragmentSubcomponentFactory();
        }
      };
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);
    }

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      AuthActivity_MembersInjector.injectSessionManager(instance, DaggerAppComponent.this.sessionManagerProvider.get());
      return instance;
    }

    private final class GetStartedFragmentSubcomponentFactory implements AuthFragmentBuildersModule_ContributeGetStartedFragment.GetStartedFragmentSubcomponent.Factory {
      @Override
      public AuthFragmentBuildersModule_ContributeGetStartedFragment.GetStartedFragmentSubcomponent create(
          GetStartedFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new GetStartedFragmentSubcomponentImpl(arg0);
      }
    }

    private final class GetStartedFragmentSubcomponentImpl implements AuthFragmentBuildersModule_ContributeGetStartedFragment.GetStartedFragmentSubcomponent {
      private GetStartedFragmentSubcomponentImpl(GetStartedFragment arg0) {

      }

      @Override
      public void inject(GetStartedFragment arg0) {
        injectGetStartedFragment(arg0);
      }

      private GetStartedFragment injectGetStartedFragment(GetStartedFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, AuthActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        GetStartedFragment_MembersInjector.injectLogo(instance, DaggerAppComponent.this.provideLoginDrawableProvider.get());
        GetStartedFragment_MembersInjector.injectRequestManager(instance, DaggerAppComponent.this.provideGlideInstanceProvider.get());
        return instance;
      }
    }

    private final class LoginFragmentSubcomponentFactory implements AuthFragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent.Factory {
      @Override
      public AuthFragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent create(
          LoginFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LoginFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LoginFragmentSubcomponentImpl implements AuthFragmentBuildersModule_ContributeLoginFragment.LoginFragmentSubcomponent {
      private Provider<UserViewModel> userViewModelProvider;

      private LoginFragmentSubcomponentImpl(LoginFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(UserViewModel.class, (Provider) userViewModelProvider);
      }

      private ViewModelProviderFactory viewModelProviderFactory() {
        return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final LoginFragment arg0) {
        this.userViewModelProvider = UserViewModel_Factory.create(DaggerAppComponent.this.applicationProvider, DaggerAppComponent.this.sessionManagerProvider, DaggerAppComponent.this.provideUserReferenceProvider);
      }

      @Override
      public void inject(LoginFragment arg0) {
        injectLoginFragment(arg0);
      }

      private LoginFragment injectLoginFragment(LoginFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, AuthActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        LoginFragment_MembersInjector.injectFirebaseAuth(instance, DaggerAppComponent.this.provideFirebaseAuthProvider.get());
        LoginFragment_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
        return instance;
      }
    }

    private final class RegisterFragmentSubcomponentFactory implements AuthFragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Factory {
      @Override
      public AuthFragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent create(
          RegisterFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RegisterFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RegisterFragmentSubcomponentImpl implements AuthFragmentBuildersModule_ContributeRegisterFragment.RegisterFragmentSubcomponent {
      private Provider<UserViewModel> userViewModelProvider;

      private RegisterFragmentSubcomponentImpl(RegisterFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(UserViewModel.class, (Provider) userViewModelProvider);
      }

      private ViewModelProviderFactory viewModelProviderFactory() {
        return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final RegisterFragment arg0) {
        this.userViewModelProvider = UserViewModel_Factory.create(DaggerAppComponent.this.applicationProvider, DaggerAppComponent.this.sessionManagerProvider, DaggerAppComponent.this.provideUserReferenceProvider);
      }

      @Override
      public void inject(RegisterFragment arg0) {
        injectRegisterFragment(arg0);
      }

      private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, AuthActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        RegisterFragment_MembersInjector.injectFAuth(instance, DaggerAppComponent.this.provideFirebaseAuthProvider.get());
        RegisterFragment_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
        return instance;
      }
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory> mainFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Factory> userFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory> bookingFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(AuthActivity.class, (Provider) DaggerAppComponent.this.authActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(MainFragment.class, (Provider) mainFragmentSubcomponentFactoryProvider).put(UserFragment.class, (Provider) userFragmentSubcomponentFactoryProvider).put(BookingFragment.class, (Provider) bookingFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.mainFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory get(
            ) {
          return new MainFragmentSubcomponentFactory();
        }
      };
      this.userFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Factory get(
            ) {
          return new UserFragmentSubcomponentFactory();
        }
      };
      this.bookingFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory get(
            ) {
          return new BookingFragmentSubcomponentFactory();
        }
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectSessionManager(instance, DaggerAppComponent.this.sessionManagerProvider.get());
      return instance;
    }

    private final class MainFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent create(
          MainFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MainFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MainFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributeMainFragment.MainFragmentSubcomponent {
      private Provider<UpcomingActViewModel> upcomingActViewModelProvider;

      private Provider<NewActViewModel> newActViewModelProvider;

      private MainFragmentSubcomponentImpl(MainFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(UpcomingActViewModel.class, (Provider) upcomingActViewModelProvider).put(NewActViewModel.class, (Provider) newActViewModelProvider).build();
      }

      private ViewModelProviderFactory viewModelProviderFactory() {
        return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MainFragment arg0) {
        this.upcomingActViewModelProvider = UpcomingActViewModel_Factory.create(DaggerAppComponent.this.applicationProvider);
        this.newActViewModelProvider = NewActViewModel_Factory.create(DaggerAppComponent.this.applicationProvider);
      }

      @Override
      public void inject(MainFragment arg0) {
        injectMainFragment(arg0);
      }

      private MainFragment injectMainFragment(MainFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        MainFragment_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
        MainFragment_MembersInjector.injectRequestManager(instance, DaggerAppComponent.this.provideGlideInstanceProvider.get());
        return instance;
      }
    }

    private final class UserFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent create(
          UserFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new UserFragmentSubcomponentImpl(arg0);
      }
    }

    private final class UserFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent {
      private UserFragmentSubcomponentImpl(UserFragment arg0) {

      }

      @Override
      public void inject(UserFragment arg0) {
        injectUserFragment(arg0);
      }

      private UserFragment injectUserFragment(UserFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class BookingFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent create(
          BookingFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new BookingFragmentSubcomponentImpl(arg0);
      }
    }

    private final class BookingFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributeBookingFragment.BookingFragmentSubcomponent {
      private BookingFragmentSubcomponentImpl(BookingFragment arg0) {

      }

      @Override
      public void inject(BookingFragment arg0) {
        injectBookingFragment(arg0);
      }

      private BookingFragment injectBookingFragment(BookingFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        return instance;
      }
    }
  }
}
